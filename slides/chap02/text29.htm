<html>
<head>
<title>Text for slides, Chapter 2 talk</title>
</head>
<body>
<h1>Objects -- ADT's with Message Passing</h1>
<p>
So objects are in one sense just the next logical step from modules
and ADT's.  Like modules they provide a mechanism for encapsulation,
for hiding implementation details from other parts of an application.
Like the ADT they provide instantiation, the ability to create new
instances, as a key feature.  But they also bring something new
that was not found in these earlier abstractions.  A key new feature
is message passing, which is a dynamic (that is, run-time) way of binding
procedure names to behavior.  Another key new concept is the idea
of a class, an organizational principle that permits sharing and
reuse.  These two new features get combined in the idea of
polymorphism, which is a new form of software reuse that is formed
on top of classes and dynamic binding.
<p>
So objects are both an old and, at the same time, a revolutionary new
idea.
<p>
<h6><a href="slide29.au">[audio]</a>
<a href="http://www.cs.orst.edu/~cs582/real/chap02/slide29.ram">[real]</a>
 Text to accompany <a href="slide29.htm">slide29</a>,
in <a href="outline.htm">Chapter 2</a> of <a href="ftp://ftp.cs.orst.edu/pub/budd/oopintro/">An Introduction to Object-Oriented Programming</a></h6>
</body>
</html>
