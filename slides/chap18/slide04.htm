<html>
<head><title>Chapter 18, Slide 04</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 18: Generics :
<td bgcolor=#FCCF97><a href="slide05.htm">next</a>
<td bgcolor=#FCCF97><a href="slide03.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide04.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap18/slide04.ram">real</a>
<td bgcolor=#FCCF97><a href="text04.htm" target=text>text</a>
</table>
<p>
<h1>Template Classes</h1>
<font size=+2>
While template functions are useful, it is more common to use templates
with classes.
<pre>
template &lt;class T> class Box {
public:
	Box (T initial) : value(initial) { }
	T getValue() { return value; }
	setValue (T newValue) { value = newValue; }
private:
	T value;
};

	Box&lt;int> iBox(7);
	cout &lt;&lt; iBox.getValue();
7
	iBox.setValue(12);
	cout &lt;&lt; iBox.getValue();
12
</pre>
Notice how the programmer filled in the template argument when
creating a new variable.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 18</a>, Slide 04</h6>
<hr>
</body>
</html>
