<html>
<head><title>Chapter 26, Slide 08</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 26: Distributed Computing :
<td bgcolor=#FCCF97><a href="slide09.htm">next</a>
<td bgcolor=#FCCF97><a href="slide07.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide08.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap26/slide08.ram">real</a>
<td bgcolor=#FCCF97><a href="text08.htm" target=text>text</a>
</table>
<p>
<h1>Asking an Object About its State</h1>
<font size=+2>
Moving back to a single machine, there are systems that allow a program
to dynamically inquire the capabilities of another class, and then
add it into a running program.
<p>
A good example is Java Beans, which is not described in the book.
Again, this is built on the reflection facilities described in
the previous chapter.
<p>
The programmer collects a bunch of <i>components</i>, then assembles
them into a new application.   Often components have a visual
interface, and can be assembled using a visual tool, without needing
to write (much) programming.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 26</a>, Slide 08</h6>
<hr>
</body>
</html>
