<html>
<head><title>Chapter 8, Slide 11</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 8: Inheritance and Substitution:
<td bgcolor=#FCCF97><a href="slide12.htm">next</a>
<td bgcolor=#FCCF97><a href="slide10.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide11.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap08/slide11.ram">real</a>
<td bgcolor=#FCCF97><a href="text11.htm" target=text>text</a>
</table>
<p>
<h1>An Argument for Substitution</h1>
<font size=+2>
<P>
Consider the following argument:
<P><UL>
<LI> Instances of the subclass must possess all data areas associated with
the parent class.
<p>
<LI> Instances of the subclass must implement, through inheritance at least
(if not explicitly overridden) all functionality defined for the parent
class.  (They can also define new functionality, but that is unimportant
for the present argument).
<p>
<LI> Thus, an instance of a child class can mimic the behavior of the parent
class. It therefore seesm reasonable that a variable declared 
as a parent, should be able to hold a value generated from the child class.
</UL>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 8</a>, Slide 11</h6>
The <i>principle of substitutability</i> is sometimes called <i>Liskov 
substitutability</i>, since one of the first people to describe the idea
was Barbara Liskov, of MIT.
<hr>
</body>
</html>
