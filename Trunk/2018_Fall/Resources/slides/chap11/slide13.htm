<html>
<head><title>Chapter 11, Slide 13</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 11: Static and Dynamic Behavior:
<td bgcolor=#FCCF97><a href="slide14.htm">next</a>
<td bgcolor=#FCCF97><a href="slide12.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide13.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap11/slide13.ram">real</a>
<td bgcolor=#FCCF97><a href="text13.htm" target=text>text</a>
</table>
<p>
<h1>Method Binding in C++</h1>
<font size=+2>
C++ is the most complex language.  Not only must the programmer
use the <b>virtual</b> keyword, but true polymorphism only occurs
with pointer or reference variables.
</font>
<table><tr><td><pre>
<font size=+2>
class Animal {
public:
	virtual void speak () { cout << "Animal Speak !\n"; }
	void reply () { cout << "Animal Reply !\n"; }
};

class Dog : public Animal {
public:
	virtual void speak () { cout << "woof !\n"; }
	void reply () { cout << "woof again!\n"; }
};

class Bird : public Animal {
public:
	virtual void speak () { cout << "tweet !\n"; }
};
</font>
</pre><td><pre>
<font size=+2>
	Animal * a;
	Dog * b = new Dog();
	b->speak();
woof !
	a  = b;
	a->speak();
woof !
	Bird c = new Bird();
	c->speak();
tweet !
	a = c;
	a->speak();
tweet !
</font>
</pre></table>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 11</a>, Slide 13</h6>
<br>
We will see an explanation for the curious C++ semantics when we discuss
memory management in the next chapter.
<hr>
</body>
</html>
