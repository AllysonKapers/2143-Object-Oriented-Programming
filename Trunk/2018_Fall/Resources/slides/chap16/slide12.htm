<html>
<head><title>Chapter 16, Slide 12</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 16: Overriding :
<td bgcolor=#FCCF97><a href="slide13.htm">next</a>
<td bgcolor=#FCCF97><a href="slide11.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide12.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap16/slide12.ram">real</a>
<td bgcolor=#FCCF97><a href="text12.htm" target=text>text</a>
</table>
<p>
<h1>Downside of Replacement</h1>
<font size=+2>
The down side of replacement semantics is that there is no guarantee
that the child class will have any meaning at all similar to the
parent class.
<p>
For example, a child class could redefine <b>sqrt</b> to compute
the cube root of its argument.
<p>
This goes back to the difference between subclasses and subtypes.
<p>
A refinement makes this more difficult to do, since whatever the parent
does is guaranteed to be part of the child.  This is why most languages
use refinement semantics for constructors.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 16</a>, Slide 12</h6>
<hr>
</body>
</html>
