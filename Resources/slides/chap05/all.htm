<html>
<head><title>Chapter 5, Outline</title></head>
<body BGCOLOR=#FCEADT>
<a href="slide01.htm">[first slide]</a>
<h1 ALIGN=center>Introduction to Object Oriented Programming, 3rd Ed</h1>
<h2 ALIGN=center><a href="http://www.cs.orst.edu/~budd/">Timothy A. Budd</a></h2>
<h1 ALIGN=center>Chapter 5</h1>
<h1 ALIGN=center>Messages, Instances and Initialization</h1>
<p>
<b>Outline</b>
<ol>
<li><a href="slide01.htm"> Roadmap </a>
<li><a href="slide02.htm"> Messages are not Function Calls </a>
<li><a href="slide03.htm"> Message Passing Syntax </a>
<li><a href="slide04.htm"> Statically and Dynamically Typed Languages </a>
<li><a href="slide05.htm"> The Receiver Variable </a>
<ol>
<li><a href="slide06.htm"> Implicit Use of This </a>
</ol>
<li><a href="slide07.htm"> Object Creation </a>
<li><a href="slide08.htm"> Memory Recovery </a>
<ol>
<li><a href="slide09.htm"> Memory Errors </a>
</ol>
<li><a href="slide10.htm"> Constructors </a>
<ol>
<li><a href="slide11.htm"> Overloaded Constructors </a>
</ol>
<li><a href="slide12.htm"> Metaclasses </a>
<ol>
<li><a href="slide13.htm"> New Classes for Classes </a>
</ol>
<li><a href="slide14.htm"> Chapter Summary </a>
</ol>
<p><b>Other Material</b>
<ul>
<li>A printer friendly version of <a href="all.htm">all slides</a>
</ul>

<h6 ALIGN=right>Intro OOP, <a href="slide1.htm">Chapter 3</a>, Outline</h6>
<hr>


<p>
<h1>Roadmap</h1>
In Chapter 4 we described the static, or compile time aspects of classes.
In this chapter we examine their run-time features:
<ul>
<li>Message Passing Syntax
<p><li>Object Creation and Initialization (constructors)
<p><li>Accessing the Receiver from within a method
<p><li>Memory Management or garbage collection
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 01</h6>
<hr>
<p>
<h1>Messages are not Function Calls</h1>
Recall from chapter 1 that we noted the following differences between
a message and a function (or procedure) call
<ul>
<li>A message is always given to some object, called the receiver
<p><li>The action performed in response is determined by the receiver,
different receivers can do different actions in response to the same
message.
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 02</h6>
<hr>
<p>
<h1>Message Passing Syntax</h1>
Although the syntax may differ in different langauges, all messages
have three identifiable parts:
<pre>
	aGame.displayCard (aCard, 42, 27);

</pre>
<ul>
<li>The message receiver
<p><li>The message selector
<p><li>An optional list of arguments
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 03</h6>
<hr>
<p>
<h1>Statically Types and Dynamically Typed Languages</h1>
A distinction we will see throughout the term is between the following:
<ul>
<li>A statically typed language requires the programmer to declare 
a type for each variable.  The validity of a message passing expression
will be checked at compile time, based on the declared type of the
receiver.
<p><li>A dynamically typed language associates types with values, 
not with variables.  A variable is just a name.
The legality of a message cannot be determined until run-time.
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 04</h6>
<hr>
<p>
<h1>The Receiver Variable</h1>
Inside a method, the receiver can be accessed by means of a pseudo-variable
<ul>
<li>Called <b>this</b> in Java, C++, C#
<p><li>Called <b>self</b> in Smalltalk, Objective-C, Object Pascal
<p><li>Called <b>current</b> in Eiffel
</ul>
<pre>

function PlayingCard.color : colors;
begin
	if (self.suit = Heart) or (self.suit = Diamond) then
		color := Red
	else
		color := Black;
end

</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 05</h6>
<hr>
<p>
<h1>Implicit Use of This</h1>
Within a method a message expression or a data access with no explicit
receiver is implicitly assumed to refer to <b>this</b>:
<pre>

class PlayingCard {
	...
	public void flip () { setFaceUp( ! faceUp ); }
	...
}

</pre>
Is assumed to be equivalent to:
<pre>

class PlayingCard {
	...
	public void flip () { this.setFaceUp( ! this.faceUp); }
	...
}

</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 06</h6>
<hr>
<p>
<h1>Object Creation</h1>
In most programming languages objects must be created dynamically, usually
using the <b>new</b> operator:
<pre>

	PlayingCard aCard; // simply names a new variable

	aCard = new PlayingCard(Diamond, 3); // creates the new object

</pre>
The declaration simply names a variable, the <b>new</b> operator is needed
to create the new object value.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 07</h6>
<hr>
<p>
<h1>Memory Recovery</h1>
Because in most languages objects are dynamically allocated, they must
be recovered at run-time.  There are two broad approches to this: 
<ul>
<li>Force the programmer to explicitly say when a value is no longer
being used:
<pre>
		delete aCard; // C++ example
</pre>
<li>Use a <b>garbage collection</b> system that will automatically
determine when values are no longer being used, and
recover the memory.
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 08</h6>
<hr>
<p>
<h1>Memory Errors</h1>
Garbage collection systems impose a run-time overhead, but prevent a number
of potential memory errors:
<ul>
<li>Running out of memory because the programmer forgot to free values
<p><li>Using a memory value after it has been recovered
<pre>

	PlayingCard * aCard = new PlayingCard(Spade, 1);
	delete aCard;
	cout << aCard.rank();

</pre>
<p><li>Free the same value twice
<pre>
	PlayingCard * aCard = new PlayingCard(Spade, 1);
	delete aCard;
	delete aCard; // delete already deleted value

</pre>
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 09</h6>
<hr>
<p>
<h1>Constructors</h1>
A <b>constructor</b> is a function that is implicitly invoked when
a new object is created.  The constructor performs whatever actions are 
necessary in order to initialize the object.
<ul>
<li>In C++, Java, C# a constructor is a function with the same name
as the class.
<p><li>In Python constructors are all named __init__
<p><li>In Delphi, Objective-C, constructors have special syntax,
but can be named anything.  (Naming your constructors <b>create</b> is a
common convention).
</ul>
<pre>

class PlayingCard {	// a Java constructor
	public PlayingCard (int s, int r) {
		suit = s;
		rank = r;
		faceUp = true;
	}
	...
}

</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 10</h6>
<hr>
<p>
<h1>Overloaded Constructors</h1>
Constructors are often overloaded, meaning there are a number of functions with
the same name.  They are differentiated by the type signature, and the
arguments used in the function call or declaration:
<pre>

class PlayingCard {
public:
	PlayingCard ( )  // default constructor, 
			// used when no arguments are given
		{ suit = Diamond; rank = 1; faceUp = true; }

	PlayingCard (Suit is) // constructor with one argument
		{ suit = is; rank = 1; faceUp = true; }

	PlayingCard (Suit is, int ir) // constructor with two arguments
		{ suit = is; rank = ir; faceUp = true; }
};

</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 11</h6>
<hr>
<p>
<h1>Metaclasses</h1>
In Smalltalk (and Objective-C) classes are just objects, instances of
class <b>Class</b>.  <b>new</b> is just a message given to a class object.
If we want to create constructors, where do we put them?
<ul>
<li>They can't be part of the collection of messages of <i>instances</i> of
the class, since we don't yet have an instance.
<p><li>They can't be part of the messages understood by class <b>Class</b>,
since not all classes have the same constructor message.
</ul>
Where do we put the behavior for individual class instances?
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 12</h6>
<hr>
<p>
<h1>Solution: Create New Classes for Classes</h1>
The solution is to create a new class, whos only instance is itself a class.
<p>
picture
<p>
An elegant solution that maintains the simple instance/class relationship.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 13</h6>
<hr>
<p>
<h1>Chapter Summary</h1>
In this chapter we have examined the following topics:
<ul>
<li>Message Passing Syntax
<p><li>Object Creation and Initialization (constructors)
<p><li>Accessing the Receiver from within a method
<p><li>Memory Management or garbage collection
<p><li>Metaclasses in Smalltalk
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 5</a>, Slide 14</h6>
<hr>
</body>
</html>
