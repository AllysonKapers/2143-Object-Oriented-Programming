<html>
<head><title>Chapter 8, Slide 05</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 8: Inheritance and Substitution:
<td bgcolor=#FCCF97><a href="slide06.htm">next</a>
<td bgcolor=#FCCF97><a href="slide04.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide05.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap08/slide05.ram">real</a>
<td bgcolor=#FCCF97><a href="text05.htm" target=text>text</a>
</table>
<p>
<h1>Inheritance is both Extension and Contraction</h1>
<font size=+2>
<ul>
<li>Because the behavior of a child class is strictly larger than the behavior
of the parent, the child is an extension of the parent.  (larger)
<p><li>Because the child can override behavior to make it fit a specialized
situation, the child is a contraction of the parent. (smaller)
</ul>
This interplay between inheritance and overriding, extension and contraction,
is what allows object-oriented systems to take very general tools and
specialize them for specific projects.  This interplay is ultimately
the source of a great deal of the power of OOP.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 8</a>, Slide 05</h6>
<hr>
</body>
</html>
