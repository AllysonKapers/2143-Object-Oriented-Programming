<html>
<head><title>Chapter 8, Slide 12</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 8: Inheritance and Substitution:
<td bgcolor=#FCCF97><a href="slide13.htm">next</a>
<td bgcolor=#FCCF97><a href="slide11.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide12.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap08/slide12.ram">real</a>
<td bgcolor=#FCCF97><a href="text12.htm" target=text>text</a>
</table>
<p>
<h1>Subclass vs Subtype</h1>
<font size=+2>
Of course, the problem with this argument is that a child class can override
a method and make arbitrary changes.  It is therefore useful to define
two separate concepts:
<ul>
<li>To say that A is a <b>subclass</b> of B merely asserts that A is formed
using inheritance.
<p><li>To say that a is a <b>subtype</b> of B asserts that A preserves the
meaning of all the operations in B.
</ul>
It is possible to form subclasses that are not subtypes; and (in some languages
at least) form subtypes that are not subclasses.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 8</a>, Slide 12</h6>
<br>
(We will have much more to say on this topic in a later chapter).
<hr>
</body>
</html>
