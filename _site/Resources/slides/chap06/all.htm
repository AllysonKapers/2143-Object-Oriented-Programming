<html>
<head><title>Chapter 6, Slide 1</title></head>
<body >
<h1 ALIGN=center>Introduction to Object Oriented Programming, 3rd Ed</h1>
<h2 ALIGN=center><a href="http://www.cs.orst.edu/~budd/">Timothy A. Budd</a></h2>
<h1 ALIGN=center>Chapter 6</h1>
<h1 ALIGN=center>A Case Study : Eight Queens </h1>
<p>
<b>Outline</b>
<ol>
<li><a href="slide01.htm"> Statement of the Problem</a>
<li><a href="slide02.htm"> OOP Approach</a>
<li><a href="slide03.htm"> Observations</a>
<li><a href="slide04.htm"> Pointers</a>
<li><a href="slide05.htm"> CRC Card for Queen</a>
<li><a href="slide06.htm"> CRC Card for Queen - Backside</a>
<li><a href="slide07.htm"> Initialization</a>
<li><a href="slide08.htm"> Finding First Solution</a>
<li><a href="slide09.htm"> Advancing to Next Position</a>
<li><a href="slide10.htm"> Printing Solution </a>
<li><a href="slide11.htm"> Can Attack</a>
<li><a href="slide12.htm"> The Last Queen</a>
<li><a href="slide13.htm"> Chapter Summary</a>
</ol>
<p>
<b>Source Code</b>
<ul>
<li>Eight Queens program in <a href="queen.cpp">C++</a>
<li>Eight Queens program in <a href="queen.p">Object Pascal</a>
<li>Eight Queens program in <a href="QSolve.java">Java</a>
(not on CD, see <a href="cd.htm">explanation</a>)
</ul>
<p>
<b>Other Material</b>
<ul>
<li>A printer friendly version of <a href="all.htm">all slides</a>
<li>HTML page for <a href="java.htm">queen program in Java</a>
(not available on CD, see <a href="cd.htm">explanation</a>)
<li>A puzzle related to the 8-queens is the knights-tour problem.
While slightly more advanced, in Chapter 18 we will introduce
the idea of frameworks.  In another book I have written an
example <a href="../chap18/stl.htm">backtracking framework</a> illustrated 
using this puzzle.
</ul>

<h6 ALIGN=right>Intro OOP, <a href="slide1.htm">Chapter 6</a>, Slide 1</h6>
<hr>


<p>
<h1>Statement of the Problem</h1>
<P>
Problem - how to place eight queens on a chessboard so that no two queens
can attack each other:
</font>
<p>
<IMG SRC="slide01.gif" alt="chessboard with 8 queens">
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 1</h6>
<hr>
</body>


<br>
<h1>OOP Approach</h1>
<P>
More than just solving the problem, we want to solve the problem in an OOP
manner.
<P><UL>
<LI>
Structure the program so that the data values <EM>themselves</EM> discover the
solution.
<p>
<LI>
Similar to creating a universe and setting it in motion.
<p>
<LI>
No single controlling manager.
</UL>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 2</h6>
<hr>
</body>


<br>
<h1>Observations</h1>
<P>
Here are a few observations we can make concerning this problem:
<P><UL>
<LI>
Queens can be assigned a column, problem is then to find row positions.
<p>
<LI>
One obvious behavior is for a queen to tell if it can attack a given position.
<p>
<LI>
Can structure the problem using <EM>generators</EM> - each queen can be asked to
find one solution, then later be asked to find another solution.
</UL>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 3</h6>
<hr>
</body>


<br>
<h1>Pointers</h1>
<P>
We can make each queen point to the next on the left, then send messages only
to the rightmost queen.  Each queen will in turn send messages only to the
neighbor it points to.
</font>
<p>
<IMG SRC="slide04.gif" alt="picture of queens pointing to each other">
<br>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 4</h6>
<hr>
</body>


<br>
<h1>CRC Card for Queen</h1>
<IMG SRC="slide05.gif" alt="CRC card for queen class">
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 5</h6>
<hr>
</body>


<br>
<h1>CRC Card for Queen - Backside</h1>
<br>
<IMG SRC="slide06.gif" alt="back side of CRC card">
<br>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 6</h6>
<hr>
</body>


<br>
<h1>Initialization</h1>
<P>
Initialization will set each queen to point to a neighbor, and set column
value.  C++ version is shown:
<pre>

main() {
	Queen * lastQueen = 0;

	for (int i = 1; i <= 8; i++) {
		lastQueen = new Queen(i, lastQueen);
		if (! lastQueen->findSolution())
			cout << "no solution";
	}
	
	if (lastQueen->first()) 
		lastQueen->print();
}

Queen::Queen (int col, Queen * ngh)
{
	column = col;
	neighbor = ngh;
	row = 1;
}

</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 7</h6>
<hr>
</body>


<br>
<h1>Finding First Solution</h1>
<P>
Finding first solution, in pseudo-code:
<pre>

function queen.findSolution -> boolean
	
	while neighbor.canAttack (row, column) do
		if not self.advance then
			return false;

		// found a solution
	return true;
end

</pre>
We ignore for the moment the question of what to do if you don't have 
a neighbor
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 8</h6>
<hr>
</body>


<br>
<h1>Advancing to Next Position</h1>
<pre>

function queen.advance -> boolean

	if row < 8 then begin
		row := row + 1;
		return self.findSolution
	end

		// cannot go further, move neighbor
	if not neighbor.advance then
		return false

	row := 1
	return self findSolution

end
</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 9</h6>
<hr>
</body>


<br>
<h1>Printing Solution</h1>
Just recursively ripple down the list of queens, asking each to
print itself.
<pre>

procedure print
	neighbor.print
	write row, column
end

</pre>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 10</h6>
<hr>
</body>


<br>
<h1>Can Attack</h1>
<pre>

function canAttack(r, c)
	if r = row then
		return true
	cd := column - c;
	if (row + cd = r) or (row - cd = r) then
		return true;
	return neighbor.canAttack(r, c)
end
</pre>
For a diagonal, the difference in row must equal the difference
in columns.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 11</h6>
<hr>
</body>


<br>
<h1>The Last Queen</h1>
<P>
Two approaches to handling the leftmost queen -
<P><UL>
<LI>
Null pointers - each queen must then test for null pointers before sending
a message
<p>
<LI>
Special ``sentinel'' value - indicates end of line for queens
</UL>
<P>
Both versions are described in text.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 12</h6>
<hr>
The complete solutions in each language are not described in the slides,
but are presented in detail in the text.
<br>
A <a href="java.htm">Java applet</a> version is available.
</body>
<br>
<h1>Chapter Summary</h1>
<p>
Important not for the problem being solved, but how it is solved.
<P><UL>
<LI>
Solution is the result of community of agents working together
<p>
<LI>
No single controlling program - control is decentralized
<p>
<LI>
Active objects determine their own actions and behavior.
</UL>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 6</a>, Slide 13</h6>
<hr>
</body>


</body>
</html>
