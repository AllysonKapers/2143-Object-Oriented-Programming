<html>
<head><title>Chapter 10, Slide 07</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 10: Subclasses and Subtypes:
<td bgcolor=#FCCF97><a href="slide08.htm">next</a>
<td bgcolor=#FCCF97><a href="slide06.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide07.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap10/slide07.ram">real</a>
<td bgcolor=#FCCF97><a href="text07.htm" target=text>text</a>
</table>
<p>
<h1>The Substitution Paradox</h1>
<font size=+2>
There is a curious paradox that lies at the heart of most strongly typed
object-oriented programming languages.
<ul>
<li>Substitution is permitted, based on subclasses.
That is, a variable declared as the parent type is allowed to hold
a value derived from a child type.
<p><li>Yet from a semantic point of view, substitution only makes
sense if the expression value is a subtype of the target variable.
</ul>
If substitution only makes sense for subtypes and not for all subclasses,
why do programming languages based the validity of assignment on
subclasses?
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 10</a>, Slide 07</h6>
<hr>
</body>
</html>
