<html>
<head><title>Chapter 12, Slide 21</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 12: Implications of substitution:
<td bgcolor=#FCCF97><a href="outline.htm">next</a>
<td bgcolor=#FCCF97><a href="slide20.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide21.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap12/slide21.ram">real</a>
<td bgcolor=#FCCF97><a href="text21.htm" target=text>text</a>
</table>
<p>
<h1>Chapter Summary</h1>
<font size=+2>
We have explored the implications that result from the inclusion of
the principle of substitution in an object oriented programming language.
<ul>
<li>Because values are not known until run time, you either have
complex semantics (as in C++) or objects are dynamic (as in Java and most other
languages).
<p><li>Because objects are dynamic, most object-oriented languages end 
up using a garbage collection system.
<p><li>Dynamic semantics naturally lean to pointer semantics for assignment
<p><li>Pointer semantics mean that equality and identity are two different
concepts
<p><li>Since equality is domain specific, the programmer must be free to
redefine the meaning as appropriate
<p><li>Because the programmer can redefine equality arbitrarily, there is
no guarantee that semantics of equals is preserved.
</ul>
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 12</a>, Slide 21</h6>
<hr>
</body>
</html>
