<html>
<head><title>Chapter 11, Slide 10</title></head>
<body BGCOLOR=#FCEADT>
<table border=0>
<tr><td>Introduction to OOP
<td>Chapter 11: Static and Dynamic Behavior:
<td bgcolor=#FCCF97><a href="slide11.htm">next</a>
<td bgcolor=#FCCF97><a href="slide09.htm">previous</a>
<td bgcolor=#FCCF97><a href="slide10.au">audio</a>
<td bgcolor=#FCCF97><a href="http://www.cs.orst.edu/~cs582/real/chap11/slide10.ram">real</a>
<td bgcolor=#FCCF97><a href="text10.htm" target=text>text</a>
</table>
<p>
<h1>The Container Problem</h1>
<font size=+2>
<P>
The task of reverse polymorphism is often encountered in connection with
a collection of values - we have a list of items from the parent class
(say a list of Mammals), and when we extract a value we need to
know if it is a more specific type.
<P>
Generally occurs in languages with a single inheritance tree, where the
only type we may have associated with a value is the class ``Object''.
<P>
Solving this problem generally requires values to have ``self knowledge''
of their own type.  In some languages they do, in some languages values
do not.
</font>
<h6 ALIGN=right>Intro OOP, <a href="outline.htm">Chapter 11</a>, Slide 10</h6>
<br>
A case study examining one solution to the container class problem will
be presented in a later chapter.
<br>
Java, unfortunately, uses to term <b>Container</b> to mean a type of graphical
component, and not a collection class, as is common in most other languages.
<hr>
</body>
</html>
